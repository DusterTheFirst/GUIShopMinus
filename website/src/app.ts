/*!
 * Copyright (C) 2019  Zachary Kohnen
 */

import JSON5 from "json5";
import "normalize.css";
import Vue from "vue";
import "./styles.scss";
import { fuzzySearch, getItemIcon, IMapObject, parseColorCodesToHTML, zipObject } from "./util";

interface IStore {
    name: string;
    submenus: ISubmenu[];
}

interface ISubmenu {
    icon: string;
    name: string;
    description: string;
    items: IItem[];
}

interface IItem {
    material: string;
    name: string;
    amount: number;
    price: number;
    sellprice: number;
}

(async () => {
    const items = (await import(/* webpackPreload: true */ "./items.json")).default;
    const mccodes = await import(/* webpackPreload: true */ "./mccodes.json");

    const colorsZipped = zipObject(mccodes.colors).map(x => ({
        code: x.key,
        ...x.value
    }));

    const stylesZipped = zipObject(mccodes.styles).map(x => ({
        code: x.key,
        ...x.value
    }));

    let store: IStore = {
        name: "&8Example &3Shop &4Name",
        submenus: []
    };

    let vm = new Vue({
        computed: {
            coloredTitle() {
                return parseColorCodesToHTML(this.store.name);
            }
        },
        data: {
            colors: colorsZipped,
            items: await Promise.all(items.map(async x => getItemIcon(x.type, x.meta))),
            store,
            styles: stylesZipped
        },
        el: "#app",
        methods: {
            upload() {
                let input = document.querySelector<HTMLInputElement>("#fileupload");

                if (input !== null) {
                    input.click();
                }
            },
            uploadfile(event: Event) {
                let input = document.querySelector<HTMLInputElement>("#fileupload");

                if (input !== null) {
                    let files = input.files;

                    if (files !== null) {
                        let fr = new FileReader();
                        fr.onload = () => {
                            console.log(fr.result);

                            try {
                                let parsed = JSON5.parse(fr.result as string);

                                // SANITIZE

                                this.store = parsed as IStore;
                            } catch (e) {
                                alert(e);
                            }
                        };
                        fr.readAsText(files[0]);
                    }
                }
            },
            download() {
                const header =
`/*
* DO NOT EDIT THIS FILE
*
* This file was generated at ${new Date().toISOString()}
*/

`;

                let element = document.createElement("a");
                element.setAttribute("href", `data:application/json;charset=utf-8,${encodeURIComponent(header)}${encodeURIComponent(JSON.stringify(this.store))}`);
                element.setAttribute("download", "shop.json");

                element.style.display = "none";
                document.body.appendChild(element);

                element.click();

                document.body.removeChild(element);
            }
        }
    });
})().catch(e => console.error(e));
